{"version":3,"sources":["store/users.store.js","components/CustomInputComponent.jsx","components/AddForm.jsx","components/UserItem.jsx","components/UserList.jsx","components/SearchForm.jsx","App.js","serviceWorker.js","index.js"],"names":["UsersStore","data","this","users","push","name","companyName","phone","id","uuid","v4","filter","user","toString","_this","matchesFilter","RegExp","test","observable","action","computed","CustomInputComponent","_ref","field","props","Object","objectWithoutProperties","react_default","a","createElement","className","TextField","assign","fullWidth","formik_esm","component","validationSchema","Yup","shape","required","positive","integer","min","AddForm","inject","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_addValue","userStore","addUser","state","inputValue","_this2","initialValues","onSubmit","values","resetForm","Paper","elevation","label","placeholder","type","Button","variant","color","Component","UserItem","_this$props","TableRow","TableCell","scope","align","onClick","deleteUser","UserList","observer","Table","TableHead","TableBody","findUser","map","index","components_UserItem","key","SearchForm","_handleSearch","e","target","value","setState","filterData","_clearData","onChange","App","mobx_react_module","components_AddForm","components_SearchForm","components_UserList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a14a9b0.chunk.js","sourcesContent":["import { observable, computed, action } from \"mobx\";\nimport uuid from \"uuid\"\n\nexport default class UsersStore {\n    @observable users = [];\n    @observable filter = \"\";\n\n    @action\n    addUser(data) {\n      this.users.push({\n        name: data.name,\n        companyName: data.companyName,\n        phone: data.phone,\n        id: uuid.v4()\n      });\n    }\n\n    @action\n    deleteUser(id) {\n      this.users = this.users.filter((user) => user.id.toString() !== id);\n    }\n\n    @computed\n    get findUser() {\n      const matchesFilter = new RegExp(this.filter, \"i\")\n      return this.users.filter(user => !this.filter || matchesFilter.test(user.name) ||  matchesFilter.test(user.companyName) ||  matchesFilter.test(user.phone)) || [];\n  }\n}","import React from 'react';\nimport { ErrorMessage } from 'formik';\nimport TextField from '@material-ui/core/TextField';\n\nimport '../App.css';\n\n\nconst CustomInputComponent = ({ field, ...props }) =>\n  <div className=\"inputField\">\n    <TextField fullWidth {...field} {...props} />\n    <ErrorMessage name={field.name} component=\"div\" className=\"error\"/>\n  </div>\n\nexport default CustomInputComponent","import React, { Component } from 'react';\nimport { inject } from 'mobx-react';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nimport CustomInputComponent from './CustomInputComponent';\n\nimport '../App.css';\n\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required('Required'),\n  companyName: Yup.string().required('Required'),\n  phone: Yup.number().positive().integer().min(0, \"Invalid.\").required('Required'),\n});\n\n\n@inject(\"userStore\")\nclass AddForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  _addValue = () => this.props.userStore.addUser(this.state.inputValue)\n\n  render() {\n    return (\n    <div className=\"addForm\">\n      <Formik\n        initialValues={{ name: '', companyName: '', phone: '' }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { resetForm }) => {this.props.userStore.addUser(values); resetForm();}}\n      >\n        <Paper elevation={10}>\n          <Form>\n            <div className=\"form-container\">\n              <Field name=\"name\" label=\"Name\" placeholder=\"Name\" component={CustomInputComponent} className=\"field\"/>\n              <Field name=\"companyName\" label=\"Company Name\" placeholder=\"Company Name\" component={CustomInputComponent} className=\"field\"/>\n              <Field type=\"number\" name=\"phone\" label=\"Phone Number\" placeholder=\"Phone Number\" component={CustomInputComponent} className=\"field\"/>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\">\n                Submit\n            </Button>\n            </div>\n          </Form>\n          </Paper>\n      </Formik>\n    </div>\n    );\n  }\n}\n\nexport default AddForm;\n","import React, { Component } from 'react';\nimport { inject } from 'mobx-react';\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Button } from '@material-ui/core';\n\n@inject(\"userStore\")\nclass UserItem extends Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n  \n  render() {\n    const { user, userStore } = this.props\n    const { name, companyName, phone, id } = user\n    return (\n      <TableRow>\n        <TableCell component=\"th\" scope=\"row\">{name}</TableCell>\n        <TableCell align=\"right\">{companyName}</TableCell>\n        <TableCell align=\"right\">{phone}</TableCell>\n        <TableCell align=\"right\">\n          <Button\n            onClick={() => userStore.deleteUser(id)}\n            variant=\"contained\"\n            color=\"primary\">\n            Clear\n          </Button>\n        </TableCell>\n      </TableRow>\n    );\n  }\n}\n\nexport default UserItem;","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport UserItem from './UserItem';\n\nimport '../App.css';\n\n\n@inject(\"userStore\")\n@observer\nclass UserList extends Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <Paper elevation={10}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell align=\"right\">Company Name</TableCell>\n            <TableCell align=\"right\">Phone Number</TableCell>\n            <TableCell align=\"right\">Clear</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {this.props.userStore.findUser.map((user, index) => <UserItem key={index} user={user}/>)}\n        </TableBody>\n      </Table>\n    </Paper>\n    );\n  }\n}\n\nexport default UserList;","import React, { Component } from \"react\";\nimport { observer, inject } from \"mobx-react\";\n\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nimport '../App.css';\n\n\n@observer\n@inject(\"userStore\")\nclass SearchForm extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      filterData: ''\n    }\n  }\n\n  _handleSearch = e => {\n    this.props.userStore.filter = e.target.value;\n    this.setState({ filterData: e.target.value })\n  }\n\n  _clearData = () => {\n    this.props.userStore.filter = '';\n    this.setState({ filterData: '' })\n  }\n\n  render() {\n    const { filterData } = this.state\n    return (\n      <Paper elevation={10} className=\"container\">\n          <div className=\"searchForm\">\n            <TextField\n              fullWidth\n              value={filterData}\n              onChange={this._handleSearch}\n            />\n            <Button\n              onClick={this._clearData}\n              type=\"reset\"\n              variant=\"contained\"\n              color=\"primary\">\n              Clear\n            </Button>\n          </div>\n      </Paper>\n    )\n  }\n}\n\nexport default SearchForm","import React, { Component } from 'react';\nimport { Provider } from 'mobx-react';\nimport {  } from 'mobx-react';\n\nimport './App.css';\nimport UsersStore from './store/users.store';\nimport AddForm from './components/AddForm';\nimport UserList from './components/UserList';\nimport SearchForm from './components/SearchForm';\n\nconst userStore = new UsersStore();\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider userStore = {userStore}>\n        <div className=\"App\">\n          <AddForm />\n          <SearchForm />\n          <UserList />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}